# 9.7 引用作实参
 
# 体验引用

# 变量就是存储数据的名字而已，这个名字就可以理解为引用，再python语言中数据其实传递来传递去都是通过变量的形式来传递的
# 简单粗暴的理解，引用就是变量名。引用可以当作实参传入到函数里面

# 1. 不可变类型：int
# 1.1 声明变量保存整型数据，把这个数据赋值到另一个变量：id()检测两个变量的id值（内存的十进制值）
a = 1
b = a
print(b)     # 输出1
# 发现a和b的id值相同的
print(id(a))   # 输出 140708418216784
print(id(b))    # 输出 140708418216784

# 修改a的数据测试id值
a = 2

print(b)   # 输出1

# 因为修改了a的数据，内存要开辟另外一份内存存储2，id()检测a和b的地址不同
print(id(a))  # 输出 140708418216816
print(id(b))  # 输出 140708418216784


# ============================================================================

# 2. 可变类型：列表

aa = [10, 20] 
bb = aa
print(bb)       # [10, 20]

print(id(aa))    # 2266328490632
print(id(bb))	# 2266328490632

# 增加数据
# 列表是可变类型
aa.append(30)
print(aa)   # [10, 20, 30]
print(bb)   # [10, 20, 30]

print(id(aa))  # 2266328490632  地址值
print(id(bb))  # 2266328490632


 
# 引用当作实参

def test(a):
    print(a)
    print(id(a))

    a += a
    print(a)
    print(id(a))

b = 100
test(b)    # 这是不可变类型数据

c = [11, 22]
test(c)    # 这是可变类型数据


 

# 9.8 可变和不可变类型汇总
 
# 小总结：

# '''
# 数据的可变类型：如果对数据进行修改，修改的是原数据，这样的数据是可变类型
# 数据的不可变类型：如果数据修改的时候改的不是原数据，这样的数据是不可变类型。

# 可变类型：
#     列表
#     字典
#     集合
# 不可变类型：
#     整型
#     浮点型
#     字符串
#     元组
    
# 重点： 作用域、函数多返回值、函数的参数

# ————————————————