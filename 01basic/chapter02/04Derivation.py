# 8. 推导式
 
# 推导式的作用：简化代码

# 列表推导式会返回一个列表 ，字典推导式会返回一个字典，集合推导式会返回一个集合
 
 

# 8.1 列表推导式
# 直接上代码：推导式如何简化代码的，如何使用推导式


'''
书写代码：
	1. 创建空列表
	2. 循环将有规律的数据写入到列表
	
方法实现:
	1. 循环实现 
	2. 列表推导式（化简代码，创建或控制有规律的列表）

得出结论：
	1. 列表推导式代码量最少，起到了简化代码的作用
'''
# =========================================================================

# while 实现
list1 = []
i = 0
while i < 10:
    list1.append(i)
    i += 1
print(list1)  # 输出结果为[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# ==/========================================================================

# for 实现
# 用for实现比while实现所需的代码量少
list1 = []
for i in range(10):
    list1.append(i)
print(list1)   # 输出结果为[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

# ==========================================================================

# 列表推导式实现
list1 = [i for i in range(10)]  # 中括号里面第一个i,是接收数据的返回值，然后保存在列表中
print(list)    # 输出[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 

# 再举个栗子：带if的列表推导式

# 需求：0-10偶数数据的列表

# 1. 简单的列表推导式，range()步长实现
list1 = [i for i in range(0,10,2)]
print(list1)        # 输出结果为 [0, 2, 4, 6, 8]

# 2. for循环加if 创建有规律的列表
list2 = []
for i in range(10):
    if i % 2 == 0:
        list2.append(i)
print(list2)

# 3. 把for循环配合if的代码 改写 带if的列表推导式
list3 = [i for i in range(10) if i % 2 == 0]
print(list3)

# 再来个栗子：

'''
需求：创建列表如下：[(1,0),(1,1),(1,2),(2,0),(2,1),(2,2)]
1. 用for循环嵌套的方法进能够解决
    数据1：1 和 2 range(1,3)
    数据2：0 1 2 用 range(3)
2. 用列表推导式解决：多for的列表推导式等同于for循环嵌套，就是去掉标点、回车符和缩进。

'''

# 1. 用for循环嵌套

list1 = []
for i in range(1,3):
    for j in range(3):
        # 列表里面追加元素：循环前准备一个空列表，然后这里追加元组数据到列表
        list1.append((i,j))
print(list1)   # 输出结果为[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]


# 2. 多个for实现列表推导式

list2 = [(i,j) for i in range(1,3) for j in range(3)]
print(list2)    # 输出结果为[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]


# 8.2 字典推导式
 
# 直接上栗子：

# 创建字典 key是1-4的数字，value是这个数字的平方
dict1 = {i: i**2 for i in range(1,5)}
print(dict1)  # 输出 {1: 1, 2: 4, 3: 9, 4: 16}



# 再举个栗子：合并列表为字典

# 1. 长度一样的列表合并字典
# list1 = ['name', 'age', 'gender']
# list2 = ['tom', 20, 'man']
# dict1 = {list1[i]: list2[i] for i in range(len(list1))}
# print(dict1)   # 输出的结果为 {'name': 'tom', 'age': 20, 'gender': 'man'}

# 长度不一样的列表合并成字典
list3 = ['name', 'age', 'gender', 'id']
list4 = ['tom', 20, 'man']

# 下面的语句会报错，因为不对等，如果取长的列表len(list3)则会报错
# dict1 = {list3[i]: list4[i] for i in range(len(list3))}

# 下面的语句才正确
dict2 = {list3[i]: list4[i] for i in range(len(list4))}
print(dict2)   # 输出结果为{'name': 'tom', 'age': 20, 'gender': 'man'}

'''
总结：
    1. 如果两个列表数据个数相同，len统计任何一个列表的长度都可以
    2. 如果两个列表数据个数不同，len统计数据多的列表数据个数会报错，len统计数据少的列表数据个数不会报错
'''
 
# 再来个栗子：提取字典中的目标数据

counts = {'MBP': 268, 'HP':125,  'DELL':201, 'Lenovo': 199, 'acer': 99}

'''
1. 需求：提取电脑台数大于等于200
获取所有键值对数据，判断v值大于等于200返回
'''

# 返回一个迭代器，内部是元组dict_items([('MBP', 268), ('HP', 'DELL'), ('Lenovo', 199), ('acer', 99)])
print(counts.items())

# 提取字典中目标数据，这个用法非常重要！！！
dict1 = {key:value for key,value in counts.items() if value >= 200}
print(dict1)  # {'MBP': 268, 'DELL': 201}

# 8.3 集合推导式
# 这个用的不多，简单的来个栗子：

# 需求：创建一个集合，数据为下方列表的2次方
list1 = [1,1,2]
set1 = {i ** 2 for i in list1}
print(set1)   # 输出 {1, 4}
# 集合有数据去重功能，所以这个集合数据只有两个数据，分别是1，4

# 8.4 推导式总结
# 三种推导式书写的格式

# 1. 列表推导式
# [xx for xx in range]

# 2. 字典推导式
# {xx1 : xx2  for ... in ...}

# 3. 集合推导式
# {xx for xx in ...}