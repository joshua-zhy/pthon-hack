
# 12.1 文件的打开、写入、关闭
# 上栗子，一看就懂：

'''
在python，使用open函数，可以打开已经存在的文件，或者创建一个新文件。

语法：open(name, mode)
name：是要打开的目标文件名的字符串（可以包含文件所在的具体路径）
mode: 设置打开文件的模式（访问模式）：只读、写入、追加等。

'''

# 1. 打开open()
f = open('test.txt','w')  # 如果这个文件不存在，则新建此文件

# 2. 读写操作 write() read()
f.write('aaa')

# 3. 关闭 close()
f.close()


'''
总结:
	1.文件操作的作用是把一些内容(数据)存储起来,可以让程序下一次执行的时候直接使用，而不必重新制作一份,省事省力.

	2.这里的关闭相当于就是保存了。如果文件不关闭,这个文件将一直占用计算机内存,内存消耗比较大的,对于计算机来说,内存消耗大,内存占用量大，风险比较高了.

    3. 注意:可以只打开和关闭文件,不进行任何读写操作
'''




# 12.2 主访问模式的特点（r、w、a）
 
# 主访问模式（r、w、a）

# 主访问模式的特点，基础访问模式的特点（r、w、a）
'''
实验目标：
    1. 访问模式对文档的影响
    2. 访问模式对wirte（）的影响
    3. 访问模式是否可以省略
'''
# =========================================================================

# r: 如果文件不存在，报错：不支持写入操作，表示只读
f = open('test.txt1', 'r')  # 因为是读操作，没有这个文件，所以报错
f.write('aa')  # 报错,因为是只读模式，不能写入
# 下面的才能正常执行
f = open('test.txt','r')
f.close()
#
# ==========================================================================

# w：只写，如果文件不存在，新建文件，执行写入。如果不存在则会会覆盖原有内容
f = open('1.txt', 'w')  # 如果没有1.txt这个文件，则会新建这个文件
f.write('bbb')  # 1.txt文件中的内容是aaa，现在变成了bbb
f.close()

# ==========================================================================

# a：追加，如果文件不存在，新建文件，在写入内容。如果文件存在，在原有内容基础上，追加新内容
f = open('1.txt','a')
# f = open('2.txt','a')  # 如果文件不存在，则新建文件
f.write('helloworld')
f.close()

# =========================================================================

# 访问模式参数是否可以省略，如果省略表示访问模式为r
# f = open('100.txt')  # 找不到文件，报错
f = open('1.txt')  # 这个时候不报错了
f.close()

 

# 12.3 读取函数（read、readlines、readline）
 
# read()

'''
read()
文件对象.read(num)
num表示要从文件中读取的数据的长度（单位是字节），如果不写参数，则读取所有内容
'''

f = open('test.txt','r')
# 文章内容如果换行，底层有\n,会有字节占位，导致read书写参数读取出来的眼睛看到的个数和参数不匹配
# read不写参数表示读取所有：
# print(f.read())  # read不写参数,表示读取所有
print(f.read(10))

 
# readlines()

'''
readlines()可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素
'''
f = open('test.txt','r')
con = f.readlines()
print(con)   # 输出['aaaaa\n', 'bbbbb\n', 'ccccc\n', 'ddddd']  \n是换行符的意思
f.close()

# readline()


'''
readline()一次读取一行内容
'''
f = open('test.txt','r')

con = f.readline()
print(con)    # aaaaa  这是test.txt文件内容的第一行

con = f.readline()
print(con)    # bbbbb  这时test.txt文件内容的第二行

f.close()



"""
带加号的访问模式对文件的影响，以及文件指针对数据读取的影响
测试目标：
    1.r+ 和 w+ a+的区别
    2.文件指针对数据读取的影响

"""
# r+：r没有该文件则报错；文件指针在开头，所以能读取出来数据
f = open('test.txt','r+')
print(f.read()) #
f.close()

# w+: 没有该文件会新建文件：w特点：文件指针在开头，用新内容覆盖原内容
# f = open('test1.txt','w+')  # 如果没有该文件则新建文件

# 用新内容把原内容覆盖掉，这里只进行了读取，没有调用write写入，那就代表写入的是空的，空的内容把有数据的内容给覆盖掉了
f = open('test.txt','w+')  # 此时test文件里的内容被清空，因为被覆盖了
con = f.read()
print(con)
f.close()

# a+:没有该文件会新建文件：文件指针在结尾，无法读取数据（文件指针后面没有数据）
f = open('test100.txt','a+')  # 没有test100.txt这个文件
f = open('test.txt','a+')
con = f.read()     # 文件指针在结尾，无法读取数据（文件指针后面没有数据）
print(con)
f.close()

